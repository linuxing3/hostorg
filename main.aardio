/*启动参数检测{{*/
if(_ARGV.github){	
	loadcodex("\forms\tools\github.aardio");
	return;
}
elseif(_ARGV.sshInstall){
	import fsys.wow64;
	import process;
	import console;
	console.open();
	
	var prcs;
	fsys.wow64.disableRedirection(
    	function(){
    		var dest,port = string.match(_ARGV.sshInstall,"(.+)\:(\d+)");
    		if(dest&&port){
    			_ARGV.sshInstall = "-p" + port +" " + dest;
    		}
    		
        	prcs = process("ssh","-t " +_ARGV.sshInstall + ` "firewall-cmd --permanent --add-port=80/tcp;firewall-cmd --permanent --add-port=443/tcp;firewall-cmd --reload;iptables -A INPUT -p tcp --dport 80 -j ACCEPT;iptables -A INPUT -p tcp --dport 443 -j ACCEPT;wget -P /root -N --no-check-certificate ""https://raw.githubusercontent.com/mack-a/v2ray-agent/master/install.sh"" && chmod 700 /root/install.sh && /root/install.sh"`)
   			if(!prcs){
   				if(_WIN10_LATER){
   					import process.control; 
					process.control("ms-settings:optionalfeatures");
					console.log("请检查是否指定了正确的SSH端口,或尝试重新安装 OpenSSH.Client");
   				}
   				else {
   					console.log("此功能仅支持 Windows 10 系统");
   				} 
   			}
   			else {
   				import process.job.limitKill;
   				prcs.assignToJobObject(process.job.limitKill);	
   				prcs.wait();
   			}
   			
   			console.pause();
    	}
	)
	
	return;
}
elseif(_ARGV.sshLogin){
	import fsys.wow64;
	import process;
	import console;
	console.open();
	
	var prcs;
	fsys.wow64.disableRedirection(
    	function(){
    		var dest,port = string.match(_ARGV.sshLogin,"(.+)\:(\d+)");
    		if(dest&&port){
    			_ARGV.sshLogin = "-p" + port +" " + dest;
    		}
    		
        	prcs = process("ssh","-t " +_ARGV.sshLogin + ``)
   			if(!prcs){ 
   				if(_WIN10_LATER){
   					import process.control; 
					process.control("ms-settings:optionalfeatures");
					console.log("请检查是否指定了正确的SSH端口,或尝试重新安装 OpenSSH.Client");
   				}
   				else {
   					console.log("此功能仅支持 Windows 10 系统");
   				} 
   			}
   			else {
   				import process.job.limitKill;
   				prcs.assignToJobObject(process.job.limitKill);	
   				prcs.wait();
   			}
   			
   			console.pause();
    	}
	)
	
	return;
}
elseif(_ARGV.sshInstallKey){
	import fsys.wow64;
	import process;
	import console;
	console.open();
	
	var prcs;
	fsys.wow64.disableRedirection(
    	function(){
    		var sshKeyPath = io.getSpecial(0x28/*_CSIDL_PROFILE*/,"/.ssh/id_rsa.pub") ;
			var keyData = string.load(sshKeyPath);
			if(!keyData){
			 	var prcs = process.popen("ssh-keygen",` -t rsa -f "`+io.getSpecial(0x28/*_CSIDL_PROFILE*/,"/.ssh/id_rsa")+`" -y`);
			 	keyData = prcs? prcs.read(-1);
			}  
			
			if(!keyData){
				if(_WIN10_LATER){
   					import process.control; 
					process.control("ms-settings:optionalfeatures");
					console.log("请检查是否指定了正确的SSH端口,或尝试重新安装 OpenSSH.Client");
   				}
   				else {
   					console.log("此功能仅支持 Windows 10 系统");
   				} 
			}
			else{
    			var dest,port = string.match(_ARGV.sshInstallKey,"(.+)\:(\d+)");
    			if(dest&&port){
    				_ARGV.sshInstallKey = "-p" + port +" " + dest;
    			}
    			
        		prcs = process("ssh","-t " +_ARGV.sshInstallKey + ` "mkdir ~/.ssh;chmod 700 ~/.ssh;chmod 600 ~/.ssh/authorized_keys;echo '`+keyData+`' > ~/.ssh/authorized_keys"`)
   				if(!prcs){
   					if(_WIN10_LATER){
   						import process.control; 
						process.control("ms-settings:optionalfeatures");
						console.log("请检查是否指定了正确的SSH端口,或尝试重新安装 OpenSSH.Client");
   					}
   					else {
   						console.log("此功能仅支持 Windows 10 系统");
   					} 
   				}
   				else {
   					import process.job.limitKill;
   					prcs.assignToJobObject(process.job.limitKill);	
   					prcs.wait();
   				}
   			}
   			
   			console.pause();
    	}
	)
	
	return;
}
elseif(_ARGV.updateTime){
	import time.ntp;
	time.ntp.updateSystemTime();
	return;
}
else {
    import process;
	import fsys.update.simpleMain;
	
	if( fsys.update.simpleMain(
		"winXray(Xray/V2Ray、Shadowsocks、Trojan通用客户端 )",
		process().isWow64() ? "https://raw.githubusercontent.com/winXray/winXray/master/release/update/version.txt"
			: "https://raw.githubusercontent.com/winXray/winXray/master/release/update32/version.txt",
		..io.appData("/winXray/update"),
		function(version,description,status){})){
		return 0;	
	}
} 


import fonts.fontAwesome;
import win.ui;
/*DSG{{*/
mainForm = win.form(text="hostorg";right=1019;bottom=679;bgcolor=15793151;border="none")
mainForm.add(
caption={cls="bkplus";text="hostorg";left=67;top=9;right=185;bottom=27;color=6052956;dl=1;dt=1;font=LOGFONT(h=-14);z=7};
custom={cls="custom";left=83;top=40;right=1022;bottom=679;bgcolor=16777215;db=1;dl=1;dr=1;dt=1;z=4};
logo={cls="bkplus";text='\uF0D1';left=35;top=7;right=64;bottom=32;color=6450008;dl=1;dt=1;font=LOGFONT(h=-18;name='FontAwesome');z=6};
nav1={cls="plus";text="首页";left=0;top=48;right=85;bottom=128;bkBottom=3;bkLeft=7;bkRight=8;bkTop=2;border={color=-65536};color=16777215;dl=1;dt=1;font=LOGFONT(h=-13);iconStyle={font=LOGFONT(h=-37;name='FontAwesome');padding={bottom=20}};iconText='\uF007';notify=1;textPadding={bottom=10};valign="bottom";x=0.5;y=0.2;z=3};
nav2={cls="plus";text="关于";left=0;top=129;right=85;bottom=209;bkBottom=3;bkLeft=7;bkRight=8;bkTop=2;border={color=-65536};color=16777215;dl=1;dt=1;font=LOGFONT(h=-13);iconStyle={font=LOGFONT(h=-37;name='FontAwesome');padding={bottom=20}};iconText='\uF084';notify=1;textPadding={bottom=10};valign="bottom";x=0.5;y=0.2;z=5};
nav3={cls="plus";text="工具";left=0;top=207;right=85;bottom=287;bkBottom=3;bkLeft=7;bkRight=8;bkTop=2;border={color=-65536};color=16777215;dl=1;dt=1;font=LOGFONT(h=-13);iconStyle={font=LOGFONT(h=-37;name='FontAwesome');padding={bottom=20}};iconText='\uF108';notify=1;textPadding={bottom=10};valign="bottom";x=0.5;y=0.2;z=8};
navBar={cls="bkplus";left=0;top=37;right=83;bottom=681;bgcolor=8388608;db=1;dl=1;dt=1;z=1};
titleBar={cls="bkplus";left=0;top=0;right=1022;bottom=38;bgcolor=8388608;dl=1;dr=1;dt=1;forecolor=16777215;linearGradient=180;z=2}
)
/*}}*/

import win.ui.simpleWindow;
win.ui.simpleWindow( mainForm );

import win.ui.tabs;
var tbs = win.ui.tabs( 
	mainForm.nav1,
	mainForm.nav2,
	mainForm.nav3
);

tbs.skin({
	background={
		active=0xFFFFFFFF;
		default=0x00FFFFFF;
		hover=0x38FFFFFF
	};
	color={
		default=0xFFFFFFFF; 
	};
	checked={
		background={default=0xFFFFFFFF;};
		color={default=0xFF42A875;};
	}
})

tbs.add({
	text="反馈";
	iconText='\uF0E0';
})

tbs.loadForm(1,"\forms\main\hosts.aardio" );
tbs.loadForm(2,"\forms\main\config.aardio" );
tbs.loadForm(3,"\forms\tools\tools.aardio" );

tbs.selIndex = 1;


// 菜单设置

mainForm.wndproc = { 
	[ 0xACCF /*_WM_TRAYMESSAGE*/] = function(hwnd,message,wParam,lParam){
		if(lParam = 0x205/*_WM_RBUTTONUP*/){
			win.setForeground(mainForm.hwnd);
			mainForm.popmenu = win.ui.popmenu(mainForm);
			mainForm.popmenu.add("重启服务器",function(){
				publish("uiCommand.restartServer");		
			})
			mainForm.popmenu.add('打开网卡连接',function(id){  
				import process;
				process.explore("shell:::{7007ACC7-3202-11D1-AAD2-00805FC1270E}");	
			});
			mainForm.popmenu.add('退出',function(id){ 
				mainForm.onClose = null;
				mainForm.close()
			});
			var pt = ::POINT();
			::User32.GetCursorPos(pt);
			mainForm.popmenu.popup(pt.x,pt.y,true)
		}
		elseif( lParam = 0x203/*_WM_LBUTTONDBLCLK*/) {
			if(win.isIconic(mainForm.hwnd)){
				mainForm.show(9/*_SW_RESTORE*/);
			}
			else {
				mainForm.show();
			}
			
			win.setForeground(mainForm.hwnd);
		} 	
	}	
}

// 附加设置
mainForm.enableDpiScaling();

// 退出时关闭工具栏图标
mainForm.onDestroy = function(){
	mainForm.tray.delete(); 
}

import win.util.tray;
mainForm.onClose = function(hwnd,message,wParam,lParam){
	mainForm.tray = win.util.tray(mainForm)
	mainForm.show(false); 
	return true; 
}
if(_ARGV.tray){
	mainForm.onClose();
}
else {
	mainForm.show();
}


mainForm.show();
return win.loopMessage(); 
